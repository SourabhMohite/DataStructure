#include<stdio.h>
#include<stdlib.h>

typedef int BOOL;
#define TRUE 1
#define FALSE 0

typedef struct node
{
	int data;
	struct node * lchild;
	struct node * rchild;
}NODE,*PNODE,**PPNODE;

void Insert(PPNODE Root,int no)
{
	PNODE newn=NULL;
	PNODE temp=*Root;
	
	newn=(PNODE)malloc(sizeof(NODE));
	
	newn->data=no;
	newn->lchild=NULL;
	newn->rchild=NULL;
	
	if(*Root==NULL)
	{
		*Root=newn;
	}
	else
	{
		while(1)
		{
			if(temp->data==no)
			{
				printf("Element already present int BST:Unable to insert\n");
				free(newn);
				break;
			}
			if(no<(temp->data))
			{
				if(temp->lchild==NULL)
				{
					temp->lchild=newn;
					break;
				}
				temp=temp->lchild;
			}
			else if(no>(temp->data))
			{
				if(temp->rchild==NULL)
				{
					temp->rchild=newn;
					break;
				}
				temp=temp->rchild;
			}
		}
	}
}

BOOL Search(PNODE Root,int value)
{
	while(Root!=NULL)
	{
		if(Root->data==value)
		{
			break;
		}
		if(value<Root->data)
		{
			Root=Root->lchild;
		}
		else
		{
			Root=Root->rchild;
		}
	}
	if(Root==NULL)
	{
		return FALSE;
	}
	else
	{
		return TRUE;
	}
}

void Inorder(PNODE Root)
{
	if(Root!=NULL)
	{
	   Inorder(Root->lchild);
	   printf("%d\t",Root->data);
	   Inorder(Root->rchild);
	}
}

void Preorder(PNODE Root)
{
	if(Root!=NULL)
	{
	   printf("%d\t",Root->data);
	   Preorder(Root->lchild);
	   Preorder(Root->rchild);
	}
}

void Postorder(PNODE Root)
{
	if(Root!=NULL)
	{
	   Postorder(Root->lchild);
	   Postorder(Root->rchild);
	   printf("%d\t",Root->data);
	}
	
}

int main()
{
	PNODE First=NULL;
	BOOL bret=FALSE;
	printf("............................\n");
	printf("\t Binary Search Tree\n");
	printf("............................\n");
	
	int choice=1;
	int Data=0;
	
	while(choice!=0)
	{
		printf("1.Insert into BST\n");
		printf("2.Search the element\n");
		printf("3.Inorder\n");
		printf("4.Preorder\n");
		printf("5.Postorder\n");
		printf("0.Exit\n");
		printf("Enter your choice:\n");
		scanf("%d",&choice);
	  switch(choice)
	   {
	     case 1:printf("Enter the data to be inserted:");
			 scanf("%d",&Data);
		      Insert(&First,Data);
			 break;
	     case 2:printf("Enter the data to be search:");
			 scanf("%d",&Data);
			 bret=Search(First,Data);
		      if(bret==TRUE)
			   {
			     printf("Element is there in BST\n");
			   }
		      else
			   {
				printf("There is no element in BST\n");
			   }
			 break;
		case 3:Inorder(First);
			  printf("\n");
			  break;
		case 4:Preorder(First);
			  printf("\n");
			  break;
	     case 5:Postorder(First);
			 printf("\n");
			 break;
	     case 0:printf("Thank You For Using Application\n");
			 break;
	     default:printf("Please enter valid choice\n");
	  }
	}
  return 0;
}