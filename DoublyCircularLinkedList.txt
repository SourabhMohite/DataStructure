#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
	int data;
	struct node * next;
	struct node * prev;
}NODE,*PNODE,**PPNODE;

void InsertFirst(PPNODE Head,PPNODE Tail,int no)
{
	PNODE newn=NULL;
	newn=(PNODE)malloc(sizeof(NODE));
	
	newn->data=no;
	newn->next=NULL;
	newn->prev=NULL;
	
	if((*Head==NULL) && (*Tail==NULL))
	{
		*Head=newn;
		*Tail=newn;
	}
	else
	{
		newn->next=*Head;
		(*Head)->prev=newn;
		*Head=(*Head)->prev;
	}
	(*Tail)->next=*Head;
	(*Head)->prev=*Tail;
	
	printf("Data Inserted at First Successfully\n");
}

void InsertLast(PPNODE Head,PPNODE Tail,int no)
{
	PNODE newn=NULL;
	newn=(PNODE)malloc(sizeof(NODE));
	
	newn->data=no;
	newn->next=NULL;
	newn->prev=NULL;
	
	if((*Head==NULL) && (*Tail==NULL))
	{
		return;
	}
	else
	{
		(*Tail)->next=newn;
		newn->prev=*Tail;
		*Tail=(*Tail)->next;
	}
     (*Tail)->next=*Head;
	(*Head)->prev=*Tail;
	
	printf("Data Inserted at Last Successfully\n");	
}

void InsertAtPos(PPNODE Head,PPNODE Tail,int pos,int no)
{
	int iSize=0,i=0;
	iSize=Count(*Head,*Tail);

	if((pos<1) || pos>(iSize+1))
	{
		return;
	}
	else if(pos==1)
	{
		InsertFirst(Head,Tail,no);
	}
	else if(pos==iSize+1)
	{
		InsertLast(Head,Tail,no);
	}
	else
	{
		PNODE newn=NULL;
		PNODE temp=*Head;
		
		newn=(PNODE)malloc(sizeof(NODE));
		
		newn->next=NULL;
		newn->prev=NULL;
		newn->data=no;
		
		for(i=1;i<pos-1;i++)
		{
		  temp=temp->next;	
		}
		newn->next=temp->next;
		temp->next->prev=newn;
		
		temp->next=newn;
		newn->prev=temp;
	}
	printf("Data is inserted at %d Successfully\n",pos);
}

void DeleteFirst(PPNODE Head,PPNODE Tail)
{
	if((*Head==NULL) && (*Tail==NULL))
	{
		return;
	}
	if(*Head==*Tail)
	{
		free(*Head);
		*Head=NULL;
		*Tail=NULL;
	}
	else
	{
		*Head=(*Head)->next;
		free((*Tail)->next);
		
		(*Head)->prev=*Tail;
		(*Tail)->next=*Head;
	}
	
	 printf("First Node Deleted Successfully\n");
}

void DeleteLast(PPNODE Head,PPNODE Tail)
{
	if((*Head==NULL) && (*Tail==NULL))
	{
		return;
	}
	if(*Head==*Tail)
	{
		free(*Head);
		*Head=NULL;
		*Tail=NULL;
	}
	else
	{
		*Tail=(*Tail)->prev;
		free((*Head)->prev);
		
		(*Head)->prev=*Tail;
		(*Tail)->next=*Head;
	}
	
	printf("Last Node Deleted Successfully\n");
}

void DeleteAtPos(PPNODE Head,PPNODE Tail,int pos)
{
	int iSize=0,i=0;
	iSize=Count(*Head,*Tail);
	
	if((pos<1) || (pos>iSize))
	{
		return;
	}
	if(pos==1)
	{
	   DeleteFirst(Head,Tail);	
	}
	else if(pos==iSize)
	{
		DeleteLast(Head,Tail);
	}
	else
	{
		PNODE temp=*Head;
		
		
		for(i=1;i<pos-1;i++)
		{
			temp=temp->next;
		}
		temp->next=temp->next->next;
		free(temp->next->prev);
		temp->next->prev=temp;
	}
	printf("Node at position %d Deleted Successfully\n",pos);
}

void Display(PNODE Head,PNODE Tail)
{
	if((Head==NULL) && (Tail==NULL))
	{
		return;
	}
	do
	{
		printf("|%d|<->",Head->data);
		Head=Head->next;
	}while(Head!=Tail->next);
	printf("\n");
}

int Count(PNODE Head,PNODE Tail)
{
	int iCnt=0;
	if((Head==NULL) && (Tail==NULL))
	{
		return;
	}
	do
	{
		iCnt++;
		Head=Head->next;
	}while(Head!=Tail->next);
	
	return iCnt;
}

int main()
{
    PNODE First=NULL;
	PNODE Last=NULL;
	
	int choice=1,Data=0,iRet=0,iPos=0;
	
	printf("........................\n");
	printf("Doubly Circular Linked List\n");
	printf("........................\n");
	
	while(choice!=0)
	{
		printf("1.InsertFirst:\n");
		printf("2.InsertLast:\n");
		printf("3.InsertAtPos:\n");
		printf("4.DeleteFirst:\n");
		printf("5.DeleteLast:\n");
		printf("6.DeleteAtPos:\n");
		printf("7.Display:\n");
		printf("8.Count:\n");
		printf("0.Exit\n");
		
		printf("Enter Your Choice:\n");
		scanf("%d",&choice);
		
		switch(choice)
		{
			case 1:printf("Enter data to be inserted at First position:");
			       scanf("%d",&Data);
				  InsertFirst(&First,&Last,Data);
				  break;
			case 2:printf("Enter data to be inserted at Last position:");
			       scanf("%d",&Data);
				  InsertLast(&First,&Last,Data);
				  break;
		    case 3:printf("Enter the position at data is to be inserted:");
			      scanf("%d",&iPos);
				 printf("Enter data to be inserted at position:");
			      scanf("%d",&Data);
				 InsertAtPos(&First,&Last,iPos,Data);
				 break;
		    case 4:DeleteFirst(&First,&Last);
			      break;
			case 5:DeleteLast(&First,&Last);
			       break;
		    case 6:printf("Enter the position at data is to be Deleted:");
			      scanf("%d",&iPos);
				 DeleteAtPos(&First,&Last,iPos);
				 break;
			case 7:Display(First,Last);
			       break;
		    case 8:iRet=Count(First,Last);
			      printf("Number of Nodes in Linked List Are:%d\n",iRet);
				 break;
		    case 0:printf("Thank You For Using Application");
			      break;
		   default:printf("Please Enter Valid Choice\n");
			      break;
			
		}
	}
   return 0;
}